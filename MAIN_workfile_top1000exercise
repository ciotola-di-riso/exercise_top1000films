from movies_data import top_1000_movies
from actors_data import actors_in_movies

# 1) Which actor has participated in the most films?
# 2) Calculate the median of the number of actors in a film.
# 3) Which actor has collaborated with the most actors?
#For each question, answer considering: top 100 - top 200 - top 400 - top 600 - top 800 - top 1000

#_________________________________QUESTION 1: actor in most films______________________________________________________#

def get_top_x (top_x):
    return {movie for pos, movie in top_1000_movies.items() if int(pos) <= top_x}


top_100 = get_top_x(100)
top_200 = get_top_x(200)
top_400 = get_top_x(400)
top_600 = get_top_x(600)
top_800 = get_top_x(800)
top_1000 = get_top_x(1000)


def appearance_counter():                                            #keeps track of actors' appearances in the top1000
    actor_appearances = {}

    for movie in actors_in_movies.values():
        actor_name = movie['actor']                    #keys in actors_in_movies are movies, inside each there's 2 other
                                                        #keys, one is actor > value of the latter is set as 'actor_name'
        if actor_name in actor_appearances:
            actor_appearances[actor_name] += 1                            #if actor already has a counter, add +1 to it
        else:                                                             #add a 1 counter appearance for each new actor
            actor_appearances[actor_name] = 1

    top_actor = max(actor_appearances, key=actor_appearances.get)                                #found on Stackoverflow
    top_count = actor_appearances[top_actor]
    print(f"The actor who has worked in most films of the Top1000 is {top_actor} with {top_count} films.")

appearance_counter()



#for actor, count in actor_appearances.items():                   #loop to check only which actors appear more than once
    #if count > 1:
        #print(f"{actor}: {count}")



def appearances_in_top (top_x):
    top_x_movies = get_top_x_movies(top_x)
    actor_appearances = {}

    for movie, details in actors_in_movies.items():         #iterates over movies (items) in actors_in_movies (dict)

        if movie in top_x:                                  #checks if current movie is within specified top_x range
            actor_name = details['actor']

            actor_appearances[actor_name] = actor_appearances.get(actor_name,1) + 1
            #creates counter (def.1) when new actor_name appears + increments it when mentioned in actor_appearances

    top_actor = max(actor_appearances, key=actor_appearances.get)
    top_count = actor_appearances[top_actor]
    print(f"The actor who took part in most films in this Top Films is {top_actor} with {top_count} films.")


appearances_in_top(top_100)
appearances_in_top(top_200)
appearances_in_top(top_400)
appearances_in_top(top_600)
appearances_in_top(top_800)
appearances_in_top(top_1000)


# BIG BUG: appearances_in_top(top_1000) and appearance_counter() give two different results. I asked ChatGPT, who said:
# The discrepancy occurs because the two functions are iterating through and counting differentl:
# - appearance_counter() counts all appearances. It iterates over every movie in actors_in_movies.
# - appearances_in_top(top_1000) filters movies: It uses top_1000, which is derived from top_1000_movies.
# If top_1000 (a set of movie titles) does not perfectly match the keys in actors_in_movies (also movie titles), some
# movies will not be included in the count. For example, additional spaces or case mismatches can cause this issue.



#__________________________________QUESTION 2: median of actors per film_______________________________________________#


#__________________________________QUESTION 3: actor who worked with most actors_______________________________________#
